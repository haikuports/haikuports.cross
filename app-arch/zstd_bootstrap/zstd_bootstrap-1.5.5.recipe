SUMMARY="Zstandard, a fast real-time compression algorithm"
DESCRIPTION="Zstd, short for Zstandard, is a fast lossless compression \
algorithm, targeting real-time compression scenarios at zlib-level and better \
compression ratios. The zstd compression library provides in-memory \
compression and decompression functions. It offers a very wide range of \
compression / speed trade-off, while being backed by a very fast decoder. It \
also offers a special mode for small data, called dictionary compression, and \
can create dictionaries from any sample set."
HOMEPAGE="https://facebook.github.io/zstd/"
COPYRIGHT="2016-2023 Facebook, Inc.
	Meta Platforms, Inc. and affiliates"
LICENSE="BSD (2-clause)
	GNU GPL v2"
REVISION="1"
SOURCE_URI="https://github.com/facebook/zstd/archive/v$portVersion.tar.gz"
SOURCE_FILENAME="zstd-$portVersion.tar.gz"
SOURCE_DIR="zstd-$portVersion"
CHECKSUM_SHA256="98e9c3d949d1b924e28e01eccb7deed865eefebf25c2f21c702e5cd5b63b85e1"
PATCHES="zstd-$portVersion.patchset"
if [ "$effectiveTargetArchitecture" = x86_gcc2 ]; then
PATCHES="$PATCHES
	zstd-$portVersion-gcc2.patchset
	"
fi

ARCHITECTURES="all"
SECONDARY_ARCHITECTURES="x86"

libVersion="$portVersion"
libVersionCompat="$libVersion compat >= ${libVersion%%.*}"

PROVIDES="
	zstd$secondaryArchSuffix = $portVersion
	lib:libzstd$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

PROVIDES_devel="
	zstd${secondaryArchSuffix}_devel = $portVersion
	devel:libzstd$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES_devel="
	zstd$secondaryArchSuffix == $portVersion base
	"

BUILD_REQUIRES="
	gcc${secondaryArchSuffix}_syslibs_devel
	devel:libz$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	haiku_devel
	binutils_cross_$effectiveTargetArchitecture
	gcc_cross_$effectiveTargetArchitecture
	cmd:gcc$secondaryArchSuffix
	cmd:cmake
	cmd:make
	cmd:sed
	cmd:find
	"

BUILD()
{
	cd build/cmake

	# prepare a toolchain file
	cat > toolchain.cmake << EOF
		SET(CMAKE_SYSTEM_NAME Haiku)
		SET(CMAKE_SYSTEM_VERSION 1)
		SET(CMAKE_C_COMPILER $effectiveTargetMachineTriple-gcc)
		SET(CMAKE_CXX_COMPILER $effectiveTargetMachineTriple-g++)
		SET(CMAKE_FIND_ROOT_PATH $crossSysrootDir)
		SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
		SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
		SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
EOF

	cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake \
	    . -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF \
		-DZSTD_BUILD_STATIC=OFF \
		-DZSTD_BUILD_PROGRAMS=OFF -DZSTD_BUILD_TESTS=OFF $cmakeDirArgs
	make $jobArgs
}

INSTALL()
{
	cd build/cmake
	make DESTDIR=$installDestDir install

	prepareInstalledDevelLib libzstd
	fixPkgconfig
	fixCMake

	packageEntries devel \
		$installDestDir$developDir

}
